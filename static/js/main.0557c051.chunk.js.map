{"version":3,"sources":["hooks/useToggleState.js","hooks/useInputState.js","EditTodoForm.js","Todo.js","TodoList.js","TodoForm.js","TodoApp.js","hooks/useTodoState.js","App.js","serviceWorker.js","index.js"],"names":["useToggle","initialVal","useState","state","setState","toggle","value","setValue","e","target","EditTodoForm","id","task","editTodo","toggleEditForm","useInputState","handleChange","onSubmit","evt","preventDefault","style","marginLeft","width","TextField","margin","onChange","fullWidth","autoFocus","Todo","completed","toggleTodo","removeTodo","useToggleState","isEditing","ListItem","height","Checkbox","color","checked","onClick","ListItemText","textDecoration","IconButton","aria-label","TodoList","todos","Paper","List","map","todo","index","key","length","Divider","TodoForm","addTodo","reset","paddig","label","TodoApp","initialTodos","setTodos","newTodoText","uuid","todoId","updateTodos","filter","updatedTodos","useTodoState","JSON","parse","window","localStorage","getItem","useEffect","setItem","stringify","padding","backgroundColor","elevation","AppBar","position","Toolbar","Typography","Grid","container","justify","marginTop","item","xs","md","lg","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0557c051.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nfunction useToggle(initialVal = false) {\r\n  const [state, setState] = useState(initialVal);\r\n\r\n  const toggle = () => {\r\n    setState(!state);\r\n  };\r\n\r\n  return [state, toggle];\r\n}\r\n\r\nexport default useToggle;\r\n","import { useState } from \"react\";\r\n\r\nexport default (initialVal) => {\r\n  const [value, setValue] = useState(initialVal);\r\n\r\n  const handleChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const reset = () => {\r\n    setValue(\"\");\r\n  };\r\n\r\n  return [value, handleChange, reset];\r\n};\r\n","import React from \"react\";\r\nimport useInputState from \"./hooks/useInputState\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nexport default function EditTodoForm({ id, task, editTodo, toggleEditForm }) {\r\n  const [value, handleChange, reset] = useInputState(task);\r\n  return (\r\n    <form\r\n      onSubmit={(evt) => {\r\n        evt.preventDefault();\r\n        editTodo(id, value);\r\n        toggleEditForm();\r\n        // reset();\r\n      }}\r\n      style={{ marginLeft: \"1rem\", width: \"100%\" }}\r\n    >\r\n      <TextField\r\n        margin=\"normal\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        fullWidth\r\n        autoFocus\r\n      />\r\n    </form>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport useToggleState from \"./hooks/useToggleState\";\r\nimport EditTodoForm from \"./EditTodoForm\";\r\n\r\nexport default function Todo({\r\n  id,\r\n  task,\r\n  completed,\r\n  toggleTodo,\r\n  removeTodo,\r\n  editTodo,\r\n}) {\r\n  const [isEditing, toggle] = useToggleState(false);\r\n  return (\r\n    <ListItem style={{ height: \"64px\" }}>\r\n      {isEditing ? (\r\n        <EditTodoForm task={task} id={id} editTodo={editTodo} toggleEditForm={toggle} />\r\n      ) : (\r\n        <>\r\n          <Checkbox\r\n            color=\"primary\"\r\n            checked={completed}\r\n            onClick={() => toggleTodo(id)}\r\n          />\r\n          <ListItemText\r\n            style={{ textDecoration: completed ? \"line-through\" : \"none\" }}\r\n          >\r\n            {task}\r\n          </ListItemText>\r\n        </>\r\n      )}\r\n      <IconButton aria-label=\"Delete\" onClick={() => removeTodo(id)}>\r\n        <DeleteIcon />\r\n      </IconButton>\r\n      <IconButton aria-label=\"Edit\" onClick={toggle}>\r\n        <EditIcon />\r\n      </IconButton>\r\n    </ListItem>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nexport default function TodoList({ todos, toggleTodo, removeTodo, editTodo }) {\r\n  return (\r\n    <Paper>\r\n      <List>\r\n        {todos.map((todo, index) => (\r\n          <>\r\n            <Todo\r\n              // id={todo.id}\r\n              // task={todo.task}\r\n              // completed={todo.completed}\r\n              // ugyanaz az alabbi sor, mint a fenti 3!!\r\n              {...todo}\r\n              key={todo.id}\r\n              toggleTodo={toggleTodo}\r\n              removeTodo={removeTodo}\r\n              editTodo={editTodo}\r\n            />\r\n            {index < todos.length - 1 && <Divider />}\r\n          </>\r\n        ))}\r\n      </List>\r\n    </Paper>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport useInputState from \"./hooks/useInputState\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nexport default function TodoForm({ addTodo }) {\r\n  const [value, handleChange, reset] = useInputState(\"\");\r\n  return (\r\n    <>\r\n      <Paper style={{ margin: \"1rem 0\", paddig: \"0 1rem\" }} />\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          addTodo(value);\r\n          reset();\r\n        }}\r\n      >\r\n        <TextField\r\n          value={value}\r\n          onChange={handleChange}\r\n          label=\"Add New Todo\"\r\n          margin=\"normal\"\r\n          fullWidth\r\n        />\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TodoList from \"./TodoList\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport useTodoState from \"./hooks/useTodoState\";\r\n\r\nexport default function TodoApp() {\r\n  const initialTodos = JSON.parse(window.localStorage.getItem(\"todos\") || \"[]\");\r\n  const { todos, addTodo, removeTodo, toggleTodo, editTodo } = useTodoState(\r\n    initialTodos\r\n  );\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  return (\r\n    <Paper\r\n      style={{\r\n        padding: 0,\r\n        margin: 0,\r\n        height: \"100vh\",\r\n        backgroundColor: \"#fafafa\",\r\n      }}\r\n      elevation={0}\r\n    >\r\n      <AppBar color=\"primary\" position=\"static\" style={{ height: \"64px\" }}>\r\n        <Toolbar>\r\n          <Typography color=\"inherit\">TODO MADE WITH HOOKS</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Grid container justify=\"center\" style={{ marginTop: \"1rem\" }}>\r\n        <Grid item xs={11} md={8} lg={4}>\r\n          <TodoForm addTodo={addTodo} />\r\n          <TodoList\r\n            todos={todos}\r\n            toggleTodo={toggleTodo}\r\n            removeTodo={removeTodo}\r\n            editTodo={editTodo}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nexport default (initialTodos) => {\r\n  const [todos, setTodos] = useState(initialTodos);\r\n  return {\r\n    // todos: todos\r\n    todos,\r\n    addTodo: (newTodoText) => {\r\n      setTodos([...todos, { id: uuid(), task: newTodoText, completed: false }]);\r\n    },\r\n    toggleTodo: (todoId) => {\r\n      const updateTodos = todos.map((todo) =>\r\n        todo.id === todoId ? { ...todo, completed: !todo.completed } : todo\r\n      );\r\n      setTodos(updateTodos);\r\n    },\r\n    removeTodo: (todoId) => {\r\n      const updateTodos = todos.filter((todo) => todo.id !== todoId);\r\n      setTodos(updateTodos);\r\n    },\r\n    editTodo: (todoId, newTodoText) => {\r\n      const updatedTodos = todos.map((todo) =>\r\n        //...todo == {id: todo.id, completed: todo.completed}\r\n        todo.id === todoId ? { ...todo, task: newTodoText } : todo\r\n      );\r\n      setTodos(updatedTodos);\r\n    },\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport TodoApp from \"./TodoApp\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <TodoApp />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n// - TodoApp\r\n//   - TodoForm\r\n//   - TodoList\r\n//     - Todo\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}